import telebot
from telebot import types
from datetime import datetime
from db import DB
from telebot.types import LabeledPrice, ShippingOption
import time

# 6560876647:AAGZXlZDeCazV8vQ9Wf6NZlqpJV7enc1olM

payment_token = "1711243933:LIVE:7T64-2KCi-TyH3-kcN7"
#PRODUCT_COST = 500  # Example cost in the smallest units (e.g., cents for USD)
#SHIPPING_COST = 5  # Example shipping cost

bot = telebot.TeleBot('6560876647:AAGZXlZDeCazV8vQ9Wf6NZlqpJV7enc1olM')


report_for_date = '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä 1991-08-24)'
report_for_date_or_exit = "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä 1991-08-24) –∏–ª–∏ /menu –¥–ª—è –≤—ã—Ö–æ–¥–∞"
est_name_and_password_for_subsc = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ_–∑–∞–≤–µ–¥–µ–Ω–∏—è –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. H–∞–ø—Ä–∏–º–µ—Ä:\n MyBar MyPassword"
top_up_account = "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"

def send_bot_message(message, tg_id):
    bot.send_message(tg_id, message)

@bot.pre_checkout_query_handler(func=lambda query: True)
def process_pre_checkout(query):
    bot.answer_pre_checkout_query(pre_checkout_query_id=query.id, ok=True)

@bot.message_handler(content_types=['successful_payment'])
def handle_successful_payment(message):
    db = DB()
    db.addmomey_for_tg_user(message.from_user.id, message.successful_payment.total_amount / 100)
    bot.reply_to(message, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª–∏ —Å—á—ë—Ç. –ë–∞–ª–∞–Ω—Å %s" % db.get_money_for_tg_user(message.from_user.id))
    show_main_menu(message)

def show_main_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)  # —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
    btn1 = types.KeyboardButton('–ü—Ä–æ—Ñ–∏–ª—å')
    btn2 = types.KeyboardButton('–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç –∑–∞ –¥–∞—Ç—É')
    btn3 = types.KeyboardButton('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –æ—Ç—á—ë—Ç')
    btn4 = types.KeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å')
    btn5 = types.KeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á—ë—Ç')
    #btn6 = types.KeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—á—ë—Ç–∞')

    markup.add(btn1, btn2, btn3, btn4, btn5)
    bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=markup)

@bot.message_handler(commands=['start'])
def start(message):

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üëã –ù–∞—á–∞—Ç—å")
    markup.add(btn1)
    bot.send_message(message.from_user.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∏–¥–µ–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ–º. \n"
                                           "/start - –Ω–∞—á–∞—Ç—å —Å –Ω–∞—á–∞–ª–∞\n"
                                           "/menu - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é ", reply_markup=markup)

@bot.message_handler(commands=['menu'])
def start(message):

    show_main_menu(message)

@bot.message_handler(func=lambda message: message.reply_to_message is not None and
                                          (message.reply_to_message.text == report_for_date or
                                            message.reply_to_message.text ==  report_for_date_or_exit))

@bot.message_handler(func=lambda message: message.reply_to_message is not None and
                                          message.reply_to_message.text == est_name_and_password_for_subsc)

@bot.message_handler(func=lambda message: message.reply_to_message is not None and
                                          message.reply_to_message.text == top_up_account)

def handle_reply(message):
    if message.reply_to_message.text == report_for_date or message.reply_to_message.text == report_for_date_or_exit:
        try:
            date = datetime.strptime(message.text, '%Y-%m-%d')
            bot.reply_to(message, f'–í—ã –≤–≤–µ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date}')
            bot.reply_to(message, f'–ò–¥—ë—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞')
            bot.reply_to(message, f'–í—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç—á—ë—Ç –∫–∞–∫ —Ç–æ–ª—å–∫–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞')
            show_main_menu(message)

        except ValueError:
            bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.')
            markup = types.ForceReply(selective=False)
            bot.send_message(message.from_user.id, report_for_date_or_exit, reply_markup=markup)

    elif message.reply_to_message.text == est_name_and_password_for_subsc:
        if(len(message.text.split(' ')) ==2):
            name, passw = message.text.split(' ')
            bot.reply_to(message, f'–í—ã –≤–≤–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è: {name}\n–ü–∞—Ä–æ–ª—å: {passw}')
            db = DB()
            res = db.subscribe_user_to_est(message.from_user.id, name, passw)
            if (res == 'success'):
                markup = types.ForceReply(selective=False)
                bot.send_message(message.from_user.id, f'–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –æ—Ç—á—ë—Ç. –û–∂–∏–¥–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ç—á—ë—Ç–∞', reply_markup=markup)
            else:
                markup = types.ForceReply(selective=False)
                bot.send_message(message.from_user.id, res, reply_markup=markup)

            show_main_menu(message)
        else:
            bot.reply_to(message, f'–í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ_–∑–∞–≤–µ–¥–µ–Ω–∏—è –∏ –ø–∞—Ä–æ–ª—å')
            show_main_menu(message)
    elif message.reply_to_message.text == top_up_account:
        try:
            val = int(message.text)
            prices = [LabeledPrice(label='Product', amount=val * 100)]
            bot.send_invoice(
                chat_id=message.chat.id,
                title="Vision",
                description="A description about your product",
                provider_token=payment_token,  # Get this from your payment provider setup
                currency="UAH",
                is_flexible=False,  # True If you want to send a flexible invoice
                prices=prices,
                start_parameter="start_param",
                invoice_payload="payload"
            )
        except ValueError:
            bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞')
            markup = types.ForceReply(selective=False)
            bot.send_message(message.from_user.id, top_up_account, reply_markup=markup)


@bot.message_handler(content_types=['text'])
def get_text_messages(message):

    if message.text == 'üëã –ù–∞—á–∞—Ç—å':
        show_main_menu(message)

    elif message.text == '–ü—Ä–æ—Ñ–∏–ª—å':
        db = DB()
        est_subs = db.get_est_list_for_tg_user(message.from_user.id)
        messg = ''
        if est_subs is None:
            messg = '–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω–æ –∑–∞–≤–µ–¥–µ–Ω–∏–µ\n'
        else:
            ests = ' '.join(est_subs)
            messg = '–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∑–∞–≤–µ–¥–µ–Ω–∏—è: ' + ests

        est_subs = db.get_est_name_by_owner_id(message.from_user.id)

        if est_subs is None:
            messg += " \n–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω–æ –∑–∞–≤–µ–¥–µ–Ω–∏–µ"
        else:
            ests = ' '.join(est_subs)
            messg =  messg + '\n–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º: ' + ests

        messg = messg + f"\n–£ –≤–∞—Å –Ω–∞ —Å—á–µ—Ç—É {db.get_money_for_tg_user(message.from_user.id)} UAH"

        bot.send_message(message.from_user.id,
                         messg,
                         parse_mode='Markdown')



    elif message.text == '–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç –∑–∞ –¥–∞—Ç—É':
        markup = types.ForceReply(selective=False)
        bot.send_message(message.from_user.id, report_for_date, reply_markup=markup)

    elif message.text == '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –æ—Ç—á—ë—Ç':
        markup = types.ForceReply(selective=False)
        bot.send_message(message.from_user.id, est_name_and_password_for_subsc, reply_markup=markup)

    elif message.text == '–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –∑–∞–≤–µ–¥–µ–Ω–∏–µ':
        markup = types.ForceReply(selective=False)
        bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –∏ –ø–∞—Ä–æ–ª—å",
                         reply_markup=markup)

    elif message.text == "–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á—ë—Ç":
        markup = types.ForceReply(selective=False)
        db = DB()
        #if db.is_tg_user_owner(message.from_user.id):
        bot.send_message(message.from_user.id, top_up_account,
                         reply_markup=markup)
       # else:
        #    bot.send_message(message.from_user.id,
        #                     "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∑–∞–≤–µ–¥–µ–Ω–∏—è",
        #                     parse_mode='Markdown')
        show_main_menu(message)

    elif message.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—á—ë—Ç–∞":
        db = DB()
        money = db.get_money_for_tg_user(message.from_user.id)
        if money is None:
            bot.send_message(message.from_user.id,
                             "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                             parse_mode='Markdown')
        else:
            bot.send_message(message.from_user.id,
                             f"–ù–∞ —Å—á–µ—Ç—É {money} –≥—Ä–∏–≤–µ–Ω",
                             parse_mode='Markdown')


if __name__ == '__main__':
    while True:
        try:
            bot.polling(none_stop=True)
        except ConnectionError as e:
            print("Connection error, retrying...", e)
            time.sleep(15)